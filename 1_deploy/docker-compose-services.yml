services:

  nginx:
    container_name: nginx
    restart: always
    build: ../infra-nginx-dockerized
    env_file:
      - .env
    ports:
      - "${NGINX_PORT}:80"
    networks:
      - spring_net

  postgres:
    container_name: postgres
    restart: always
    image: postgres:latest
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    ports:
      - "${DATABASE_PORT}:${DATABASE_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - spring_net

  redis:
    container_name: redis
    restart: always
    env_file:
      - .env
    image: redis:latest
    command: ["redis-server", "--port", "${REDIS_PORT}", "--requirepass", "${REDIS_PASSWORD}"]
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    networks:
      - spring_net

  kafka:
    container_name: kafka
    image: bitnami/kafka:latest
    restart: always
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=SASL_PLAINTEXT://:${KAFKA_PORT},CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=SASL_PLAINTEXT://kafka:${KAFKA_PORT}
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,SASL_PLAINTEXT:SASL_PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=SASL_PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      - KAFKA_CLIENT_USERS=${KAFKA_USER}
      - KAFKA_CLIENT_PASSWORDS=${KAFKA_PASSWORD}
      - KAFKA_CFG_SASL_ENABLED_MECHANISMS=PLAIN
      - KAFKA_CFG_SASL_MECHANISM_INTER_BROKER_PROTOCOL=PLAIN
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    ports:
      - "${KAFKA_PORT}:${KAFKA_PORT}"
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - spring_net

  helloworld:
    container_name: helloworld
    restart: always
    build: ../helloworld
    env_file:
      - .env
    ports:
      - "${HELLOWORLD_PORT}:${HELLOWORLD_PORT}"
    networks:
      - spring_net

  documentation:
    container_name: documentation
    restart: always
    build: ../documentation
    env_file:
      - .env
    ports:
      - "${DOCUMENTATION_PORT}:${DOCUMENTATION_PORT}"
    networks:
      - spring_net

#  accounts:
#    container_name: accounts
#    restart: always
#    build: ../accounts
#    env_file:
#      - .env
#    depends_on:
#      - postgres
#      - redis
#    ports:
#      - "${ACCOUNTS_PORT}:${ACCOUNTS_PORT}"
#    networks:
#      - spring_net

volumes:
  postgres_data:
  kafka_data:

networks:
  spring_net:
    driver: bridge

